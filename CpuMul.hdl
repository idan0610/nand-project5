/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=outMux);
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    Not(in=instruction[15], out=Not15);
    Or(a=Not15, b=instruction[5], out=loadA);
    ARegister(in=outMux, load=loadA, out=RegisterA, out[0..14]=addressM);
    Mux16(a=RegisterA, b=inM, sel=instruction[12], out=outMux1);
    
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUoutput, load=loadD, out=RegisterD);
    ExtendAlu(x=RegisterD, y=outMux1, instruction[0..5]=instruction[6..11], instruction[6]=false, instruction[7..8]=instruction[13..14], out=ALUoutput, out=outM, zr=outZR, ng=outNG);

	//conditions to choose if we need to jump or not
	Or(a=outNG, b=outZR, out=outNZ);
	Not(in=outNZ, out=outPZ);
	And(a=instruction[2], b=outNG, out=negative);
	And(a=instruction[1], b=outZR, out=zero);
	And(a=instruction[0], b=outPZ, out=possitive);
	
	Or(a=negative, b=zero,out=outTemp1);
	Or(a=possitive, b=outTemp1, out=tmpLoad);
	//jump only if it is a c-instruction
	And(a=tmpLoad, b=instruction[15], out=load);
    PC(in=RegisterA, load=load,reset=reset, inc=true, out[0..14]=pc);
}
